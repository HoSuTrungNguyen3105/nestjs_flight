generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int      @id @default(autoincrement())
  email           String   @unique
  name            String   @db.VarChar(50)
  role            Role     @default(USER)
  password        String   @db.VarChar(100)
  pictureUrl      String   @default("")
  rank            String   @default("")
  authType        String   @default("ID,PW")
  prevPassword    String   @default("")
  isEmailVerified String   @default("N")
  transferAdminId Int?
  userAlias       String
  createdAt       Decimal  @db.Decimal(20, 3)
  updatedAt       Decimal  @db.Decimal(20, 3)
  accountLockYn   String   @default("N")
  lastLoginDate   Decimal? @db.Decimal(20, 3)
  loginFailCnt    Int      @default(0)
  mfaEnabledYn    String   @default("N")
  mfaSecretKey    String?
  tempPassword    String?

  resetToken        String?
  resetTokenExpires Decimal?        @db.Decimal(20, 3)
  transferAdmin     TransferAdmin?
  unlockRequests    UnlockRequest[]
  sessions          UserSession[]
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @db.Text
  createdAt Decimal? @db.Decimal(20, 3)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "UserSession_userId_fkey")
}

model TransferAdmin {
  id          Int            @id @default(autoincrement())
  userId      Int            @unique
  fromUserId  Int
  toUserId    Int
  status      TransferStatus @default(PENDING)
  requestedAt Decimal        @db.Decimal(20, 3)
  approvedAt  Decimal?       @db.Decimal(20, 3)
  user        User           @relation(fields: [userId], references: [id])
}

enum UnlockStatus {
  PENDING
  APPROVED
  REJECTED
}

model UnlockRequest {
  id         Int          @id @default(autoincrement())
  userId     Int
  reason     String       @db.Text
  status     UnlockStatus @default(PENDING)
  createdAt  Decimal      @db.Decimal(20, 3)
  approvedAt Decimal?     @db.Decimal(20, 3)
  user       User         @relation(fields: [userId], references: [id])

  @@index([userId], map: "UnlockRequest_userId_fkey")
}

model Flight {
  flightId            Int            @id @default(autoincrement())
  flightNo            String         @unique @db.VarChar(10)
  departureAirport    String         @db.VarChar(10)
  arrivalAirport      String         @db.VarChar(10)
  status              String         @db.VarChar(20)
  aircraftCode        String         @db.VarChar(10)
  scheduledDeparture  Decimal        @db.Decimal(20, 3)
  scheduledArrival    Decimal        @db.Decimal(20, 3)
  actualDeparture     Decimal?       @db.Decimal(20, 3)
  actualArrival       Decimal?       @db.Decimal(20, 3)
  bookings            Booking[]
  aircraft            Aircraft       @relation(fields: [aircraftCode], references: [code])
  arrivalAirportRel   Airport        @relation("ArrivalRelation", fields: [arrivalAirport], references: [code])
  departureAirportRel Airport        @relation("DepartureRelation", fields: [departureAirport], references: [code])
  meals               FlightMeal[]
  flightStatuses      FlightStatus[]

  @@index([aircraftCode], map: "Flight_aircraftCode_fkey")
  @@index([arrivalAirport], map: "Flight_arrivalAirport_fkey")
  @@index([departureAirport], map: "Flight_departureAirport_fkey")
}

model Aircraft {
  code    String   @id
  model   String
  range   Int
  flights Flight[]
}

model Airport {
  code        String   @id
  name        String
  city        String
  coordinates String
  timezone    String
  arrivals    Flight[] @relation("ArrivalRelation")
  departures  Flight[] @relation("DepartureRelation")
}

enum AuthType {
  IDPW  @map("ID,PW")
  MFA
  GMAIL
}

model Passenger {
  id              Int       @id @default(autoincrement())
  password        String    @db.VarChar(100)
  fullName        String
  email           String    @unique
  phone           String
  passport        String
  accountLockYn   String    @default("N")
  authType        AuthType  @default(IDPW)
  isEmailVerified String    @default("N")
  lastLoginDate   Decimal?  @db.Decimal(20, 3)
  loginFailCnt    Int       @default(0)
  mfaEnabledYn    String    @default("N")
  mfaSecretKey    String?
  prevPassword    String    @default("")
  bookings        Booking[]

  createdAt Decimal? @db.Decimal(20, 3)
  updatedAt Decimal? @db.Decimal(20, 3)
}

model Booking {
  id          Int         @id @default(autoincrement())
  passengerId Int
  flightId    Int
  seat        String
  bookingTime Decimal     @db.Decimal(20, 3)
  flight      Flight      @relation(fields: [flightId], references: [flightId])
  passenger   Passenger   @relation(fields: [passengerId], references: [id])
  mealOrders  MealOrder[]

  @@index([flightId], map: "Booking_flightId_fkey")
  @@index([passengerId], map: "Booking_passengerId_fkey")
}

model Meal {
  id          Int          @id @default(autoincrement())
  name        String
  mealType    String       @db.VarChar(50)
  description String?
  price       Float?
  isAvailable Boolean      @default(true)
  flightMeals FlightMeal[]
  mealOrders  MealOrder[]
}

model FlightMeal {
  id       Int    @id @default(autoincrement())
  flightId Int
  mealId   Int
  quantity Int    @default(1)
  price    Float?
  flight   Flight @relation(fields: [flightId], references: [flightId])
  meal     Meal   @relation(fields: [mealId], references: [id])

  @@index([flightId], map: "FlightMeal_flightId_fkey")
  @@index([mealId], map: "FlightMeal_mealId_fkey")
}

model MealOrder {
  id        Int     @id @default(autoincrement())
  bookingId Int
  mealId    Int
  quantity  Int     @default(1)
  booking   Booking @relation(fields: [bookingId], references: [id])
  meal      Meal    @relation(fields: [mealId], references: [id])

  @@index([bookingId], map: "MealOrder_bookingId_fkey")
  @@index([mealId], map: "MealOrder_mealId_fkey")
}

model FlightStatus {
  id          Int     @id @default(autoincrement())
  flightId    Int
  status      String  @db.VarChar(20)
  description String? @db.VarChar(255)
  updatedAt   Decimal @db.Decimal(20, 3)
  flight      Flight  @relation(fields: [flightId], references: [flightId])

  @@index([flightId], map: "FlightStatus_flightId_fkey")
}

enum Role {
  USER
  ADMIN
  MONITOR
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
}
