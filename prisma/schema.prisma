generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int     @id @default(autoincrement())
  email           String  @unique
  name            String  @db.VarChar(50)
  role            Role    @default(USER)
  password        String  @db.VarChar(100)
  pictureUrl      String  @default("")
  rank            Rank    @default(NONE)
  authType        String  @default("ID,PW")
  prevPassword    String  @default("")
  isEmailVerified String  @default("N")
  userAlias       String  @default("")
  createdAt       Decimal @db.Decimal(20, 3)
  updatedAt       Decimal @db.Decimal(20, 3)
  accountLockYn   String  @default("N")

  lastLoginDate     Decimal? @db.Decimal(20, 3)
  loginFailCnt      Int      @default(0)
  mfaEnabledYn      String   @default("N")
  mfaSecretKey      String?  @default("")
  tempPassword      String?
  resetTokenExpires Decimal? @db.Decimal(20, 3)
  resetToken        String?
  phone             String   @default("")
  otpCode           String?
  otpExpire         Decimal? @db.Decimal(20, 3)

  toTransferAdminUserYn   String? @default("N")
  fromTransferAdminUserYn String? @default("N")

  baseSalary Float?
  department Department?

  employeeNo       String?         @unique
  hireDate         Decimal?        @db.Decimal(20, 3)
  position         Position?
  status           EmployeeStatus  @default(ACTIVE)
  attendance       Attendance[]
  leaveRequest     LeaveRequest[]
  receivedMessages Message[]       @relation("ReceivedMessages")
  sentMessages     Message[]       @relation("SentMessages")
  payrolls         Payroll[]
  unlockRequests   UnlockRequest[]
  sessions         UserSession[]
  transferAdmin    TransferAdmin?
}

model TransferAdmin {
  id          Int            @id @default(autoincrement())
  userId      Int            @unique
  fromUserId  Int
  toUserId    Int
  status      TransferStatus @default(PENDING)
  requestedAt Decimal        @db.Decimal(20, 3)
  approvedAt  Decimal?       @db.Decimal(20, 3)
  user        User           @relation(fields: [userId], references: [id])
}

model Message {
  id         Int     @id @default(autoincrement())
  content    String  @db.VarChar(100)
  createdAt  Decimal @db.Decimal(20, 3)
  senderId   Int
  receiverId Int
  receiver   User    @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)
  sender     User    @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)

  @@index([senderId])
  @@index([receiverId])
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @db.Text
  createdAt Decimal? @db.Decimal(20, 3)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "UserSession_userId_fkey")
}

model Passenger {
  id              String    @id @default(cuid())
  fullName        String
  email           String    @unique
  phone           String
  passport        String
  accountLockYn   String    @default("N")
  isEmailVerified String    @default("Y")
  lastLoginDate   Decimal?  @db.Decimal(20, 3)
  bookings        Booking[]
  tickets         Ticket[]
}

model Payroll {
  id          Int           @id @default(autoincrement())
  employeeId  Int
  month       Int
  year        Int
  baseSalary  Float
  allowances  Float         @default(0)
  deductions  Float         @default(0)
  tax         Float         @default(0)
  netPay      Float
  status      PayrollStatus @default(DRAFT)
  generatedAt Decimal       @db.Decimal(20, 3)
  employee    User          @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, month, year])
  @@index([employeeId])
}

model Attendance {
  id          Int              @id @default(autoincrement())
  employeeId  Int
  date        Decimal          @db.Decimal(20, 3)
  checkIn     Decimal          @db.Decimal(20, 3)
  checkOut    Decimal          @db.Decimal(20, 3)
  status      AttendanceStatus @default(PRESENT)
  workedHours Float?
  note        String?
  createdAt   Decimal          @db.Decimal(20, 3)
  employee    User             @relation(fields: [employeeId], references: [id])

  @@unique([employeeId, date])
  @@index([employeeId])
}

model LeaveRequest {
  id           Int         @id @default(autoincrement())
  employeeId   Int
  leaveType    String
  startDate    Decimal     @db.Decimal(20, 3)
  endDate      Decimal     @db.Decimal(20, 3)
  days         Float
  reason       String?
  status       LeaveStatus @default(PENDING)
  approverId   Int?
  approverNote String?
  appliedAt    Decimal     @db.Decimal(20, 3)
  decidedAt    Decimal?    @db.Decimal(20, 3)
  employee     User        @relation(fields: [employeeId], references: [id])

  @@index([employeeId])
}

model UnlockRequest {
  id         Int          @id @default(autoincrement())
  employeeId Int
  reason     String       @db.Text
  status     UnlockStatus @default(PENDING)
  createdAt  Decimal      @db.Decimal(20, 3)
  approvedAt Decimal?     @db.Decimal(20, 3)
  user       User         @relation(fields: [employeeId], references: [id])

  @@index([employeeId], map: "UnlockRequest_employeeId_fkey")
}

model Flight {
  flightId           Int      @id @default(autoincrement())
  flightNo           String   @unique @db.VarChar(10)
  departureAirport   String   @db.VarChar(10)
  arrivalAirport     String   @db.VarChar(10)
  status             String   @db.VarChar(20)
  aircraftCode       String   @db.VarChar(10)
  scheduledDeparture Decimal  @db.Decimal(20, 3)
  scheduledArrival   Decimal  @db.Decimal(20, 3)
  actualDeparture    Decimal? @db.Decimal(20, 3)
  actualArrival      Decimal? @db.Decimal(20, 3)
  delayMinutes       Int?
  flightType         String   @db.VarChar(10)
  isCancelled        Boolean  @default(false)

  priceBusiness Float?
  priceEconomy  Float?
  priceFirst    Float?

  terminal            String?
  cancellationReason  String?          @db.VarChar(255)
  delayReason         String?          @db.VarChar(255)
  gateId              String?          @unique
  bookings            Booking[]
  aircraft            Aircraft         @relation(fields: [aircraftCode], references: [code])
  arrivalAirportRel   Airport          @relation("ArrivalRelation", fields: [arrivalAirport], references: [code])
  departureAirportRel Airport          @relation("DepartureRelation", fields: [departureAirport], references: [code])
  gate                Gate?            @relation(fields: [gateId], references: [id])
  meals               FlightMeal[]
  flightStatuses      FlightStatus[]
  gateAssignments     GateAssignment[]
  seats               Seat[]

  tickets        Ticket[]
  boardingPasses BoardingPass[]
  baggage        Baggage[]

  @@index([aircraftCode], map: "Flight_aircraftCode_fkey")
  @@index([arrivalAirport], map: "Flight_arrivalAirport_fkey")
  @@index([departureAirport], map: "Flight_departureAirport_fkey")
  @@index([gateId])
}

model Aircraft {
  code    String   @id
  model   String
  range   Int
  flights Flight[]
}

model Airport {
  code       String     @id
  name       String
  city       String
  country    String
  createdAt  Decimal    @db.Decimal(20, 3)
  updatedAt  Decimal?   @db.Decimal(20, 3)
  arrivals   Flight[]   @relation("ArrivalRelation")
  departures Flight[]   @relation("DepartureRelation")
  terminals  Terminal[]
}

model Ticket {
  id          Int     @id @default(autoincrement())
  ticketNo    String  @unique
  passengerId String
  flightId    Int
  seatClass   String  @db.VarChar(20) // ECONOMY / BUSINESS
  seatNo      String  @db.VarChar(10)
  bookedAt    Decimal @db.Decimal(20, 3)

  passenger    Passenger     @relation(fields: [passengerId], references: [id])
  flight       Flight        @relation(fields: [flightId], references: [flightId])
  boardingPass BoardingPass?
  baggage      Baggage[]
}

model BoardingPass {
  id           Int     @id @default(autoincrement())
  ticketId     Int     @unique
  issuedAt     Decimal @db.Decimal(20, 3)
  gate         String  @db.VarChar(10)
  boardingTime Decimal @db.Decimal(20, 3)

  ticket Ticket @relation(fields: [ticketId], references: [id])

  flightId Int
  flight   Flight @relation(fields: [flightId], references: [flightId])
}

model Baggage {
  id        Int     @id @default(autoincrement())
  flightId  Int
  weight    Float
  status    String  @db.VarChar(20) // CHECKED_IN / LOADED / CLAIMED / LOST
  checkedAt Decimal @db.Decimal(20, 3)

  flight   Flight @relation(fields: [flightId], references: [flightId])
  ticketId Int    @unique
  ticket   Ticket @relation(fields: [ticketId], references: [id])
}

model Meal {
  id          Int          @id @default(autoincrement())
  name        String
  mealType    MealType
  description String?
  price       Float?
  isAvailable Boolean      @default(true)
  mealCode    String       @unique
  flightMeals FlightMeal[]
  mealOrders  MealOrder[]
}

model Seat {
  id         Int      @id @default(autoincrement())
  flightId   Int
  bookingId  Int?     @unique
  type       SeatType @default(ECONOMY)
  seatNumber Int
  seatRow    String

  isBooked             Boolean  @default(false)
  isAvailable          Boolean  @default(true)
  isExitRow            Boolean  @default(false)
  isExtraLegroom       Boolean  @default(false)
  note                 String?
  price                Float?
  isHandicapAccessible Boolean  @default(false)
  isNearLavatory       Boolean  @default(false)
  isUpperDeck          Boolean  @default(false)
  isWing               Boolean  @default(false)
  booking              Booking? @relation(fields: [bookingId], references: [id])
  flight               Flight   @relation(fields: [flightId], references: [flightId])

  @@index([flightId], map: "Seat_flightId_fkey")
}

model Facility {
  id           String       @id @default(cuid())
  name         String
  type         FacilityType
  description  String?
  terminalId   String
  location     String?
  openingHours String?
  createdAt    Decimal      @db.Decimal(20, 3)
  updatedAt    Decimal      @db.Decimal(20, 3)
  terminal     Terminal     @relation(fields: [terminalId], references: [id], onDelete: Cascade)

  @@index([terminalId], map: "Facility_terminalId_fkey")
}

model Terminal {
  id          String       @id @default(cuid())
  code        String       @unique
  name        String
  description String?
  type        TerminalType
  airportId   String
  createdAt   Decimal      @db.Decimal(20, 3)
  updatedAt   Decimal      @db.Decimal(20, 3)
  facilities  Facility[]
  gates       Gate[]
  airport     Airport      @relation(fields: [airportId], references: [code], onDelete: Cascade)

  @@unique([airportId, code])
}

model GateAssignment {
  id         String  @id @default(cuid())
  gateId     String
  flightId   Int
  assignedAt Decimal @db.Decimal(20, 3)
  releasedAt Decimal @db.Decimal(20, 3)
  createdAt  Decimal @db.Decimal(20, 3)
  updatedAt  Decimal @db.Decimal(20, 3)
  flight     Flight  @relation(fields: [flightId], references: [flightId], onDelete: Cascade)
  gate       Gate    @relation(fields: [gateId], references: [id], onDelete: Cascade)

  @@unique([gateId, flightId])
  @@index([flightId], map: "GateAssignment_flightId_fkey")
}

model Gate {
  id            String           @id @default(cuid())
  code          String           @unique
  terminalId    String
  status        GateStatus       @default(AVAILABLE)
  createdAt     Decimal          @db.Decimal(20, 3)
  updatedAt     Decimal          @db.Decimal(20, 3)
  currentFlight Flight?
  terminal      Terminal         @relation(fields: [terminalId], references: [id], onDelete: Cascade)
  assignments   GateAssignment[]

  @@unique([terminalId, code])
}

model Booking {
  id          Int         @id @default(autoincrement())
  passengerId String
  flightId    Int
  bookingTime Decimal     @db.Decimal(20, 3)
  flight      Flight      @relation(fields: [flightId], references: [flightId])
  passenger   Passenger   @relation(fields: [passengerId], references: [id])
  mealOrders  MealOrder[]
  seats       Seat?

  @@index([flightId], map: "Booking_flightId_fkey")
  @@index([passengerId], map: "Booking_passengerId_fkey")
}

model FlightMeal {
  id       Int    @id @default(autoincrement())
  flightId Int
  mealId   Int
  quantity Int    @default(1)
  price    Float?
  flight   Flight @relation(fields: [flightId], references: [flightId])
  meal     Meal   @relation(fields: [mealId], references: [id])

  @@index([flightId], map: "FlightMeal_flightId_fkey")
  @@index([mealId], map: "FlightMeal_mealId_fkey")
}

model MealOrder {
  id        Int     @id @default(autoincrement())
  bookingId Int
  mealId    Int
  quantity  Int     @default(1)
  booking   Booking @relation(fields: [bookingId], references: [id])
  meal      Meal    @relation(fields: [mealId], references: [id])

  @@index([bookingId], map: "MealOrder_bookingId_fkey")
  @@index([mealId], map: "MealOrder_mealId_fkey")
}

model FlightStatus {
  id          Int     @id @default(autoincrement())
  flightId    Int
  status      String  @db.VarChar(20)
  description String? @db.VarChar(255)
  updatedAt   Decimal @db.Decimal(20, 3)
  flight      Flight  @relation(fields: [flightId], references: [flightId])

  @@index([flightId], map: "FlightStatus_flightId_fkey")
}

enum Role {
  USER
  ADMIN
  MONITOR
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum UnlockStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
  REMOTE
}

enum PayrollStatus {
  DRAFT
  FINALIZED
  PAID
}

enum Department {
  HR
  IT
  FINANCE
  OPS
  SECURITY
  OTHER
}

enum Position {
  INTERN
  STAFF
  SENIOR
  MANAGER
  DIRECTOR
  EXECUTIVE
}

enum Rank {
  JUNIOR
  MID
  SENIOR
  LEAD
  PRINCIPAL
  NONE
}

enum TerminalType {
  INTERNATIONAL
  DOMESTIC
  BUSINESS
}

enum GateStatus {
  AVAILABLE
  OCCUPIED
  MAINTENANCE
  CLOSED
}

enum FacilityType {
  RESTAURANT
  SHOP
  LOUNGE
  INFORMATION
  SECURITY
  TRANSPORTATION
  OTHER
}

enum SeatType {
  VIP
  BUSINESS
  ECONOMY
  FIRST
}

enum MealType {
  VEG
  NONVEG
  DRINK
  DESSERT
  BEVERAGE
  SNACK
  DINNER
  LUNCH
  BREAKFAST
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
}
