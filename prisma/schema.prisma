generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum SeatType {
  VIP
  BUSINESS
  ECONOMY
}

enum Role {
  USER
  ADMIN
  MONITOR
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LeaveStatus {
  PENDING
  APPROVED
  REJECTED
  CANCELLED
}

enum UnlockStatus {
  PENDING
  APPROVED
  REJECTED
}

enum EmployeeStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
  TERMINATED
}

enum ContractType {
  FULL_TIME
  PART_TIME
  INTERN
  FIXED_TERM
  FREELANCE
}

enum AttendanceStatus {
  PRESENT
  ABSENT
  LATE
  ON_LEAVE
  REMOTE
}

enum PayrollStatus {
  DRAFT
  FINALIZED
  PAID
}

enum Department {
  HR
  IT
  FINANCE
  OPS
  SECURITY
  OTHER
}

enum Position {
  INTERN
  STAFF
  SENIOR
  MANAGER
  DIRECTOR
  EXECUTIVE
}

enum Rank {
  JUNIOR
  MID
  SENIOR
  LEAD
  PRINCIPAL
  NONE
}

model User {
  id                Int             @id @default(autoincrement())
  employeeNo        String?         @unique
  email             String          @unique
  name              String          @db.VarChar(50)
  role              Role            @default(USER)
  password          String          @db.VarChar(100)
  pictureUrl        String          @default("")
  rank              Rank            @default(NONE)
  authType          String          @default("ID,PW")
  prevPassword      String          @default("")
  isEmailVerified   String          @default("N")
  userAlias         String          @default("")
  department        Department?
  position          Position?
  hireDate          Decimal?        @db.Decimal(20, 3)
  status            EmployeeStatus  @default(ACTIVE)
  baseSalary        Float?
  createdAt         Decimal         @db.Decimal(20, 3)
  updatedAt         Decimal         @db.Decimal(20, 3)
  accountLockYn     String          @default("N")
  lastLoginDate     Decimal?        @db.Decimal(20, 3)
  loginFailCnt      Int             @default(0)
  mfaEnabledYn      String          @default("N")
  mfaSecretKey      String?         @default("")
  tempPassword      String?
  resetTokenExpires Decimal?        @db.Decimal(20, 3)
  resetToken        String?
  passport          String          @default("")
  phone             String          @default("")
  otpCode           String?
  otpExpire         Decimal?        @db.Decimal(20, 3)
  transferAdmin     TransferAdmin?
  unlockRequests    UnlockRequest[]
  sessions          UserSession[]
  payrolls          Payroll[]
  attendance        Attendance[]
  leaveRequest      LeaveRequest[]
}

model UserSession {
  id        Int      @id @default(autoincrement())
  userId    Int
  token     String   @db.Text
  createdAt Decimal? @db.Decimal(20, 3)
  user      User     @relation(fields: [userId], references: [id])

  @@index([userId], map: "UserSession_userId_fkey")
}

model TransferAdmin {
  id          Int            @id @default(autoincrement())
  userId      Int            @unique
  fromUserId  Int
  toUserId    Int
  status      TransferStatus @default(PENDING)
  requestedAt Decimal        @db.Decimal(20, 3)
  approvedAt  Decimal?       @db.Decimal(20, 3)
  user        User           @relation(fields: [userId], references: [id])
}

model Payroll {
  id          Int           @id @default(autoincrement())
  employee    User          @relation(fields: [employeeId], references: [id])
  employeeId  Int
  month       Int
  year        Int
  baseSalary  Float
  allowances  Float         @default(0)
  deductions  Float         @default(0)
  tax         Float         @default(0)
  netPay      Float
  status      PayrollStatus @default(DRAFT)
  generatedAt Decimal       @db.Decimal(20, 3)

  @@unique([employeeId, month, year])
  @@index([employeeId])
}

model Attendance {
  id          Int              @id @default(autoincrement())
  employee    User             @relation(fields: [employeeId], references: [id])
  employeeId  Int
  date        Decimal          @db.Decimal(20, 3)
  checkIn     Decimal          @db.Decimal(20, 3)
  checkOut    Decimal          @db.Decimal(20, 3)
  status      AttendanceStatus @default(PRESENT)
  workedHours Float? // tính ra từ checkIn/checkOut
  note        String?
  createdAt   Decimal          @db.Decimal(20, 3)

  @@unique([employeeId, date])
  @@index([employeeId])
}

model LeaveRequest {
  id           Int         @id @default(autoincrement())
  employee     User        @relation(fields: [employeeId], references: [id])
  employeeId   Int
  leaveType    String // e.g., "ANNUAL", "SICK", "UNPAID"
  startDate    Decimal     @db.Decimal(20, 3)
  endDate      Decimal     @db.Decimal(20, 3)
  days         Float
  reason       String?
  status       LeaveStatus @default(PENDING)
  approverId   Int? // user id của người duyệt (nếu có)
  approverNote String?
  appliedAt    Decimal     @db.Decimal(20, 3)
  decidedAt    Decimal?    @db.Decimal(20, 3)

  @@index([employeeId])
}

model UnlockRequest {
  id         Int          @id @default(autoincrement())
  userId     Int
  reason     String       @db.Text
  status     UnlockStatus @default(PENDING)
  createdAt  Decimal      @db.Decimal(20, 3)
  approvedAt Decimal?     @db.Decimal(20, 3)
  user       User         @relation(fields: [userId], references: [id])

  @@index([userId], map: "UnlockRequest_userId_fkey")
}

model Flight {
  flightId           Int      @id @default(autoincrement())
  flightNo           String   @unique @db.VarChar(10)
  flightType         String   @db.VarChar(10)
  departureAirport   String   @db.VarChar(10)
  arrivalAirport     String   @db.VarChar(10)
  status             String   @db.VarChar(20)
  aircraftCode       String   @db.VarChar(10)
  priceEconomy       Float?
  priceBusiness      Float?
  priceFirst         Float?
  // maxCapacity        Int?
  scheduledDeparture Decimal  @db.Decimal(20, 3)
  scheduledArrival   Decimal  @db.Decimal(20, 3)
  actualDeparture    Decimal? @db.Decimal(20, 3)
  actualArrival      Decimal? @db.Decimal(20, 3)
  gate               String?
  terminal           String?
  isCancelled        Boolean  @default(false)
  delayMinutes       Int?

  cancellationReason String? @db.VarChar(255)
  delayReason        String? @db.VarChar(255)

  bookings            Booking[]
  aircraft            Aircraft       @relation(fields: [aircraftCode], references: [code])
  arrivalAirportRel   Airport        @relation("ArrivalRelation", fields: [arrivalAirport], references: [code])
  departureAirportRel Airport        @relation("DepartureRelation", fields: [departureAirport], references: [code])
  meals               FlightMeal[]
  flightStatuses      FlightStatus[]
  seats               Seat[]

  @@index([aircraftCode], map: "Flight_aircraftCode_fkey")
  @@index([arrivalAirport], map: "Flight_arrivalAirport_fkey")
  @@index([departureAirport], map: "Flight_departureAirport_fkey")
}

model Aircraft {
  code    String   @id
  model   String
  range   Int
  flights Flight[]
}

model Airport {
  code        String   @id
  name        String
  city        String
  coordinates String
  timezone    String
  arrivals    Flight[] @relation("ArrivalRelation")
  departures  Flight[] @relation("DepartureRelation")
}

model Booking {
  id          Int         @id @default(autoincrement())
  passengerId Int
  flightId    Int
  bookingTime Decimal     @db.Decimal(20, 3)
  flight      Flight      @relation(fields: [flightId], references: [flightId])
  mealOrders  MealOrder[]
  seats       Seat?

  @@index([flightId], map: "Booking_flightId_fkey")
  @@index([passengerId], map: "Booking_passengerId_fkey")
}

model Seat {
  id         Int      @id @default(autoincrement())
  seatNumber Int
  seatRow    String
  isBooked   Boolean  @default(false)
  flightId   Int
  bookingId  Int?     @unique
  type       SeatType @default(ECONOMY)
  booking    Booking? @relation(fields: [bookingId], references: [id])
  flight     Flight   @relation(fields: [flightId], references: [flightId])

  @@index([flightId], map: "Seat_flightId_fkey")
}

model Meal {
  id          Int          @id @default(autoincrement())
  name        String
  mealType    String       @db.VarChar(50)
  description String?
  price       Float?
  isAvailable Boolean      @default(true)
  flightMeals FlightMeal[]
  mealOrders  MealOrder[]
}

model FlightMeal {
  id       Int    @id @default(autoincrement())
  flightId Int
  mealId   Int
  quantity Int    @default(1)
  price    Float?
  flight   Flight @relation(fields: [flightId], references: [flightId])
  meal     Meal   @relation(fields: [mealId], references: [id])

  @@index([flightId], map: "FlightMeal_flightId_fkey")
  @@index([mealId], map: "FlightMeal_mealId_fkey")
}

model MealOrder {
  id        Int     @id @default(autoincrement())
  bookingId Int
  mealId    Int
  quantity  Int     @default(1)
  booking   Booking @relation(fields: [bookingId], references: [id])
  meal      Meal    @relation(fields: [mealId], references: [id])

  @@index([bookingId], map: "MealOrder_bookingId_fkey")
  @@index([mealId], map: "MealOrder_mealId_fkey")
}

model FlightStatus {
  id          Int     @id @default(autoincrement())
  flightId    Int
  status      String  @db.VarChar(20)
  description String? @db.VarChar(255)
  updatedAt   Decimal @db.Decimal(20, 3)
  flight      Flight  @relation(fields: [flightId], references: [flightId])

  @@index([flightId], map: "FlightStatus_flightId_fkey")
}
