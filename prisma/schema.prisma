generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
  MONITOR
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  name       String  @db.VarChar(50) // hoáº·c firstname + lastname
  pictureUrl String  @default("")
  rank       String  @default("")
  role       Role    @default(USER)
  password   String  @db.VarChar(100)
  createdAt  Decimal @db.Decimal(20, 0)
  updatedAt  Decimal @db.Decimal(20, 0)
  userAlias  String

  // Auth
  authType      String  @default("ID,PW")
  loginFailCnt  Int     @default(0)
  accountLockYn String  @default("N")
  mfaEnabledYn  String  @default("N")
  mfaSecretKey  String? // LÆ°u secret Google Authenticator

  isEmailVerified String @default("N")

  // Lá»‹ch sá»­ máº­t kháº©u (náº¿u cáº§n)
  prevPassword String @default("")

  // Hoáº¡t Ä‘á»™ng gáº§n nháº¥t
  lastLoginDate Decimal? @db.Decimal(20, 0)

  // Transfer admin (gom nhÃ³m)
  transferAdmin   TransferAdmin?
  transferAdminId Int?
}

model TransferAdmin {
  id          Int            @id @default(autoincrement())
  user        User           @relation(fields: [userId], references: [id])
  userId      Int            @unique // ðŸ‘ˆ ThÃªm dÃ²ng nÃ y
  fromUserId  Int
  toUserId    Int
  requestedAt DateTime       @default(now())
  approvedAt  DateTime?
  status      TransferStatus @default(PENDING)
}

enum TransferStatus {
  PENDING
  APPROVED
  REJECTED
}

model Flight {
  flightId           Int       @id @default(autoincrement())
  flightNo           String?   @db.VarChar(10)
  scheduledDeparture DateTime
  scheduledArrival   DateTime
  departureAirport   String    @db.VarChar(10)
  arrivalAirport     String    @db.VarChar(10)
  status             String    @db.VarChar(20)
  aircraftCode       String    @db.VarChar(10)
  actualDeparture    DateTime?
  actualArrival      DateTime?

  aircraft            Aircraft @relation(fields: [aircraftCode], references: [code])
  departureAirportRel Airport  @relation("DepartureRelation", fields: [departureAirport], references: [code])
  arrivalAirportRel   Airport  @relation("ArrivalRelation", fields: [arrivalAirport], references: [code])

  bookings       Booking[]
  meals          FlightMeal[]
  flightStatuses FlightStatus[]
}

model Aircraft {
  code    String   @id
  model   String
  range   Int
  flights Flight[]
}

model Airport {
  code        String @id
  name        String
  city        String
  coordinates String
  timezone    String

  departures Flight[] @relation("DepartureRelation")
  arrivals   Flight[] @relation("ArrivalRelation")
}

model Passenger {
  id       Int    @id @default(autoincrement())
  fullName String
  email    String @unique
  phone    String
  passport String

  bookings Booking[]
}

model Booking {
  id          Int      @id @default(autoincrement())
  passengerId Int
  flightId    Int
  seat        String
  bookingTime DateTime @default(now())

  passenger  Passenger   @relation(fields: [passengerId], references: [id])
  flight     Flight      @relation(fields: [flightId], references: [flightId])
  mealOrders MealOrder[]
}

model Meal {
  id          Int     @id @default(autoincrement())
  name        String
  mealType    String  @db.VarChar(50)
  description String?
  price       Float?
  isAvailable Boolean @default(true)

  flightMeals FlightMeal[]
  mealOrders  MealOrder[]
}

model FlightMeal {
  id       Int    @id @default(autoincrement())
  flightId Int
  mealId   Int
  quantity Int    @default(1)
  price    Float?

  flight Flight @relation(fields: [flightId], references: [flightId])
  meal   Meal   @relation(fields: [mealId], references: [id])
}

model MealOrder {
  id        Int @id @default(autoincrement())
  bookingId Int
  mealId    Int
  quantity  Int @default(1)

  booking Booking @relation(fields: [bookingId], references: [id])
  meal    Meal    @relation(fields: [mealId], references: [id])
}

model FlightStatus {
  id          Int      @id @default(autoincrement())
  flightId    Int
  status      String   @db.VarChar(20)
  description String?  @db.VarChar(255)
  updatedAt   DateTime @default(now()) @updatedAt

  flight Flight @relation(fields: [flightId], references: [flightId])
}
