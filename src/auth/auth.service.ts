import {
  BadRequestException,
  ConflictException,
  Injectable,
  UnauthorizedException,
} from '@nestjs/common';
import { RegisterDto } from './dto/register.dto';
import { PrismaService } from 'src/prisma.service';
import * as bcrypt from 'bcrypt';
import { LoginDto, MfaLoginDto } from './dto/login.dto';
import { JwtService } from '@nestjs/jwt';
import { Prisma } from 'generated/prisma';
import { nowDecimal, TEN_DAYS } from 'src/common/helpers/base.helper';
import * as speakeasy from 'speakeasy';
import * as QRCode from 'qrcode';
import * as crypto from 'crypto';
import { MailService } from 'src/common/nodemailer/nodemailer.service';
import { Decimal } from 'generated/prisma/runtime/library';

@Injectable()
export class AuthService {
  constructor(
    private prisma: PrismaService,
    private jwtService: JwtService,
    private mailer: MailService,
  ) {}

  async register(dto: RegisterDto) {
    const existingUser = await this.prisma.passenger.findUnique({
      where: { email: dto.email },
    });

    if (existingUser) {
      return { resultCode: '99', resultMessage: 'Email already registered' };
    }

    // Hash m·∫≠t kh·∫©u
    const hashedPassword = await bcrypt.hash(dto.password, 10);

    // T·∫°o passenger
    const passenger = await this.prisma.passenger.create({
      data: {
        email: dto.email,
        password: hashedPassword,
        fullName: dto.fullName,
        phone: dto.phone,
        passport: dto.passport,
        createdAt: nowDecimal(),
      },
    });

    return {
      resultCode: '00',
      resultMessage: 'ƒêƒÉng k√Ω th√†nh c√¥ng!',
      data: passenger.id,
    };
  }

  async loginUser(dto: LoginDto) {
    try {
      const { email, password } = dto;

      if (!email || !password) {
        return {
          resultCode: '99',
          resultMessage: 'Email v√† m·∫≠t kh·∫©u l√† b·∫Øt bu·ªôc!',
        };
      }

      const user = await this.prisma.user.findUnique({
        where: { email },
        include: { sessions: true },
      });

      if (!user)
        return { resultCode: '99', resultMessage: 'T√†i kho·∫£n ch∆∞a ƒëƒÉng k√Ω!' };

      // N·∫øu t√†i kho·∫£n ƒë√£ b·ªã kh√≥a
      if (user.accountLockYn === 'Y') {
        return {
          resultCode: '09',
          resultMessage: 'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a!',
          userId: user.id,
          requireUnlock: true,
        };
      }

      if (user.tempPassword && user.tempPassword !== '') {
        const isTempPasswordValid = await bcrypt.compare(
          password,
          user.tempPassword,
        );
        if (!isTempPasswordValid) {
          await this.handleLoginFail(user);
          return {
            resultCode: '99',
            resultMessage: 'M·∫≠t kh·∫©u t·∫°m kh√¥ng ƒë√∫ng!',
          };
        }

        return {
          resultCode: '99',
          resultMessage: 'B·∫°n c·∫ßn ƒë·ªïi m·∫≠t kh·∫©u tr∆∞·ªõc khi ƒëƒÉng nh·∫≠p!',
          requireChangePassword: true,
          userId: user.id,
        };
      }

      const isPasswordValid = await bcrypt.compare(password, user.password);

      if (!isPasswordValid) {
        await this.handleLoginFail(user);
        return { resultCode: '99', resultMessage: 'M·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!' };
      }

      await this.prisma.user.update({
        where: { id: user.id },
        data: { loginFailCnt: 0 },
      });

      const payload = { sub: user.id, email: user.email, role: user.role };
      const accessToken = await this.jwtService.signAsync(payload);

      for (const s of user.sessions) {
        if (Date.now() - Number(s.createdAt || 0) > TEN_DAYS) {
          await this.prisma.userSession.delete({ where: { id: s.id } });
        }
      }

      const validSessions = user.sessions.filter(
        (s) => Date.now() - Number(s.createdAt || 0) <= TEN_DAYS,
      );

      if (validSessions.length >= 2) {
        const oldest = validSessions.sort(
          (a, b) => Number(a.createdAt) - Number(b.createdAt),
        )[0];
        await this.prisma.userSession.delete({ where: { id: oldest.id } });
      }

      await this.prisma.userSession.create({
        data: {
          userId: user.id,
          token: accessToken,
          createdAt: nowDecimal(),
        },
      });

      return {
        resultCode: '00',
        resultMessage: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng!',
        accessToken,
        data: { id: user.id },
      };
    } catch (err) {
      console.error('üî• L·ªói loginUser:', err);
      throw err;
    }
  }

  async getAllUnlockRequests() {
    const res = await this.prisma.unlockRequest.findMany({
      include: {
        user: {
          select: {
            id: true,
          },
        },
      },
      orderBy: { createdAt: 'desc' },
    });
    return {
      responseCode: '00',
      responseMessage: 'L·∫•y danh s√°ch y√™u c·∫ßu m·ªü kh√≥a th√†nh c√¥ng!',
      data: res,
    };
  }
  async setMfa(user: { email: string }) {
    try {
      const secret = speakeasy.generateSecret({
        name: `MyApp (${user.email})`,
      });

      let existingUser = await this.prisma.user.findUnique({
        where: { email: user.email },
      });

      // N·∫øu user ƒë√£ t·ªìn t·∫°i v√† ƒë√£ b·∫≠t MFA th√¨ tr·∫£ v·ªÅ lu√¥n
      if (existingUser && existingUser.mfaEnabledYn === 'Y') {
        return {
          resultCode: '00',
          resultMessage: 'MFA ƒë√£ ƒë∆∞·ª£c k√≠ch ho·∫°t cho user n√†y',
          data: {
            hasVerified: 'Y',
            secret: existingUser.mfaSecretKey,
            qrCodeDataURL: null,
          },
        };
      }

      if (!existingUser) {
        existingUser = await this.prisma.user.create({
          data: {
            email: user.email,
            password: '', // t·∫°m
            userAlias: '',
            name: '',
            pictureUrl: '',
            rank: '',
            createdAt: new Prisma.Decimal(Date.now()),
            updatedAt: new Prisma.Decimal(Date.now()),
            mfaSecretKey: secret.base32,
            mfaEnabledYn: 'N', // üëà ch∆∞a b·∫≠t ngay
          },
        });
      } else {
        await this.prisma.user.update({
          where: { id: existingUser.id },
          data: {
            mfaSecretKey: secret.base32,
            mfaEnabledYn: 'N',
            updatedAt: new Prisma.Decimal(Date.now()),
          },
        });
      }

      const qrCodeDataURL = await QRCode.toDataURL(secret.otpauth_url);

      return {
        resultCode: '00',
        resultMessage: 'Kh·ªüi t·∫°o MFA th√†nh c√¥ng, h√£y x√°c th·ª±c code',
        data: {
          hasVerified: 'N',
          secret: secret.base32,
          qrCodeDataURL,
        },
      };
    } catch (err) {
      console.error('üî• L·ªói t·∫°o MFA:', err);
      throw err;
    }
  }
  async verifyMfaSetup(email: string, code: string) {
    const user = await this.prisma.user.findUnique({ where: { email } });

    if (!user || !user.mfaSecretKey) {
      throw new Error('User ch∆∞a kh·ªüi t·∫°o MFA');
    }

    const verified = this.verifyMfaCode(user.mfaSecretKey, code);

    if (!verified) {
      return {
        resultCode: '99',
        resultMessage: 'M√£ MFA kh√¥ng h·ª£p l·ªá',
      };
    }

    // N·∫øu ok ‚Üí b·∫≠t MFA
    await this.prisma.user.update({
      where: { id: user.id },
      data: { mfaEnabledYn: 'Y' },
    });

    return {
      resultCode: '00',
      resultMessage: 'X√°c th·ª±c MFA th√†nh c√¥ng, MFA ƒë√£ ƒë∆∞·ª£c b·∫≠t',
    };
  }

  verifyMfaCode(secret: string, code: string) {
    return speakeasy.totp.verify({
      secret,
      encoding: 'base32',
      token: code,
      window: 2,
    });
  }

  async mfaLogin(dto: MfaLoginDto) {
    try {
      const user = await this.prisma.user.findUnique({
        where: { email: dto.email },
      });

      if (!user) throw new UnauthorizedException('T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i');

      if (user.accountLockYn === 'Y') {
        throw new UnauthorizedException('T√†i kho·∫£n ƒëang b·ªã kh√≥a');
      }

      if (!user.mfaSecretKey) {
        throw new BadRequestException('T√†i kho·∫£n ch∆∞a b·∫≠t MFA');
      }
      const verified = this.verifyMfaCode(user.mfaSecretKey, dto.code);

      if (!verified) {
        throw new UnauthorizedException('M√£ MFA kh√¥ng ƒë√∫ng ho·∫∑c ƒë√£ h·∫øt h·∫°n');
      }

      const payload = { sub: user.id, email: user.email, role: user.role };

      const accessToken = await this.jwtService.signAsync(payload, {
        expiresIn: '2h',
      });

      // c·∫≠p nh·∫≠t l·∫ßn ƒëƒÉng nh·∫≠p g·∫ßn nh·∫•t
      await this.prisma.user.update({
        where: { id: user.id },
        data: {
          lastLoginDate: nowDecimal(), // n·∫øu d√πng DateTime trong schema
          loginFailCnt: 0,
        },
      });

      return {
        resultCode: '00',
        resultMessage: 'ƒêƒÉng nh·∫≠p MFA th√†nh c√¥ng',
        accessToken,
        data: { id: user.id },
      };
    } catch (err) {
      console.error('üî• L·ªói mfaLogin:', err);
      throw err;
    }
  }

  async resetMfa(userId: number) {
    try {
      const secret = speakeasy.generateSecret({
        name: `MyApp (${userId})`,
      });

      const updatedUser = await this.prisma.user.update({
        where: { id: userId },
        data: { mfaSecretKey: secret.base32, mfaEnabledYn: 'Y' },
      });

      const qrCodeDataURL = await QRCode.toDataURL(secret.otpauth_url);

      return {
        resultCode: '00',
        resultMessage: 'Reset MFA th√†nh c√¥ng',
        data: {
          secret: secret.base32,
          qrCodeDataURL,
        },
      };
    } catch (err) {
      console.error('L·ªói resetMfa:', err);
      throw err;
    }
  }

  // Helper x·ª≠ l√Ω khi sai m·∫≠t kh·∫©u
  private async handleLoginFail(user: any) {
    const newFailCnt = user.loginFailCnt + 1;

    if (newFailCnt >= 5) {
      // ‚ùå T·ª± ƒë·ªông kh√≥a t√†i kho·∫£n
      await this.prisma.user.update({
        where: { id: user.id },
        data: {
          loginFailCnt: newFailCnt,
          accountLockYn: 'Y',
        },
      });
      return {
        resultCode: '09',
        resultMessage:
          'T√†i kho·∫£n ƒë√£ b·ªã kh√≥a do nh·∫≠p sai m·∫≠t kh·∫©u qu√° nhi·ªÅu l·∫ßn!',
      };
    } else {
      // ch·ªâ tƒÉng loginFailCnt
      await this.prisma.user.update({
        where: { id: user.id },
        data: { loginFailCnt: newFailCnt },
      });
    }
  }

  async forgotPassword(email: string) {
    const user = await this.prisma.user.findUnique({ where: { email } });

    if (!user) {
      return { resultCode: '01', resultMessage: 'Email kh√¥ng t·ªìn t·∫°i' };
    }

    const tempPassword = crypto.randomBytes(3).toString('hex');

    const hashedTemp = await bcrypt.hash(tempPassword, 10);

    await this.prisma.user.update({
      where: { id: user.id },
      data: {
        tempPassword: hashedTemp,
      },
    });

    // G·ª≠i email
    await this.mailer.sendMail(
      email,
      'M·∫≠t kh·∫©u t·∫°m th·ªùi c·ªßa b·∫°n',
      `M·∫≠t kh·∫©u t·∫°m th·ªùi c·ªßa b·∫°n l√†: ${tempPassword}`,
    );

    return { resultCode: '00', message: 'ƒê√£ g·ª≠i m·∫≠t kh·∫©u t·∫°m qua email' };
  }

  async checkMfaSettingYn(email: string) {
    const user = await this.prisma.user.findUnique({ where: { email } });

    if (!user) {
      return { resultCode: '01', resultMessage: 'Email kh√¥ng t·ªìn t·∫°i' };
    }

    if (!user.mfaSecretKey || user.mfaEnabledYn !== 'Y') {
      return { resultCode: '04', resultMessage: 'T√†i kho·∫£n ch∆∞a b·∫≠t MFA' };
    }

    return {
      resultCode: '00',
      resultMessage: 'Da xac thuc mfa',
    };
  }

  async forgotPasswordWithMfa(email: string, mfaCode: string) {
    const user = await this.prisma.user.findUnique({ where: { email } });

    if (!user) {
      return { resultCode: '01', resultMessage: 'Email kh√¥ng t·ªìn t·∫°i' };
    }

    const verified = this.verifyMfaCode(user.mfaSecretKey as string, mfaCode);

    if (!verified) {
      return { resultCode: '05', resultMessage: 'M√£ MFA kh√¥ng ƒë√∫ng' };
    }

    // ‚úÖ B∆∞·ªõc 2: t·∫°o reset token (ho·∫∑c password t·∫°m)
    const resetToken = crypto.randomBytes(32).toString('hex');
    const expiresAt = Decimal(Date.now() + 1000 * 60 * 15); // 15 ph√∫t

    await this.prisma.user.update({
      where: { id: user.id },
      data: {
        // resetToken,
        resetTokenExpires: expiresAt,
      },
    });

    const resetLink = `http://localhost:3000/reset-password?token=${resetToken}`;

    // ‚úÖ B∆∞·ªõc 3: g·ª≠i email reset link
    await this.mailer.sendMail(
      email,
      'ƒê·∫∑t l·∫°i m·∫≠t kh·∫©u',
      `Vui l√≤ng nh·∫•n v√†o link n√†y ƒë·ªÉ ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u: ${resetLink}`,
    );

    return {
      resultCode: '00',
      resultMessage: 'ƒê√£ g·ª≠i link ƒë·∫∑t l·∫°i m·∫≠t kh·∫©u qua email',
    };
  }

  async changePassword(
    userId: number,
    newPassword: string,
    confirmPassword: string,
  ) {
    try {
      if (!userId) {
        return { resultCode: '01', message: 'Thi·∫øu userId' };
      }

      const user = await this.prisma.user.findUnique({
        where: { id: userId },
      });

      if (!user) {
        return { resultCode: '01', message: 'User kh√¥ng t·ªìn t·∫°i' };
      }

      if (newPassword !== confirmPassword) {
        return {
          resultCode: '02',
          message: 'M·∫≠t kh·∫©u m·ªõi v√† x√°c nh·∫≠n m·∫≠t kh·∫©u kh√¥ng kh·ªõp',
        };
      }

      const hashedPassword = await bcrypt.hash(newPassword, 10);

      await this.prisma.user.update({
        where: { id: userId },
        data: {
          password: hashedPassword,
          tempPassword: '',
          isEmailVerified: 'Y',
        },
      });

      return { resultCode: '00', message: 'ƒê·ªïi m·∫≠t kh·∫©u th√†nh c√¥ng' };
    } catch (err) {
      console.error('üî• L·ªói change password:', err);
      throw err;
    }
  }

  async logout(userId: number, token: string) {
    const now = Date.now();
    const deleted = await this.prisma.userSession.deleteMany({
      where: { userId, token },
    });

    if (deleted.count === 0) {
      return {
        resultCode: '01',
        resultMessage: 'Phi√™n ƒëƒÉng nh·∫≠p kh√¥ng t·ªìn t·∫°i ho·∫∑c ƒë√£ logout tr∆∞·ªõc ƒë√≥!',
      };
    }

    await this.prisma.user.update({
      where: { id: userId },
      data: { lastLoginDate: new Prisma.Decimal(now.toString()) },
    });

    return { resultCode: '00', message: 'Logout successful' };
  }
}
